--a_graycounter DEVICE_FAMILY="Stratix II" PVALUE=0 WIDTH=9 aclr clock cnt_en q ALTERA_INTERNAL_OPTIONS=suppress_da_rule_internal=s102
--VERSION_BEGIN 9.0 cbx_a_gray2bin 2008:05:19:09:32:04:SJ cbx_a_graycounter 2008:05:19:09:39:53:SJ cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_flex10ke 2008:05:19:10:53:03:SJ cbx_mgl 2009:01:29:16:12:07:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = reg 10 
OPTIONS ALTERA_INTERNAL_OPTION = "suppress_da_rule_internal=s102";

SUBDESIGN a_graycounter_8gc
( 
	aclr	:	input;
	clock	:	input;
	cnt_en	:	input;
	q[8..0]	:	output;
) 
VARIABLE 
	counter10a[8..0] : dffeas;
	parity9 : dffeas;
	counter_cout[8..0]	: WIRE;
	parity_cout	: WIRE;
	sclr	: NODE;
	updown	: NODE;

BEGIN 
	counter10a[].clk = clock;
	counter10a[].clrn = ( (! aclr), (! aclr), (! aclr), (! aclr), (! aclr), (! aclr), (! aclr), (! aclr), (! aclr));
	counter10a[].d = ( (counter10a[8].q $ counter_cout[7..7]), (counter10a[7].q $ (counter10a[6].q & counter_cout[6..6])), (counter10a[6].q $ (counter10a[5].q & counter_cout[5..5])), (counter10a[5].q $ (counter10a[4].q & counter_cout[4..4])), (counter10a[4].q $ (counter10a[3].q & counter_cout[3..3])), (counter10a[3].q $ (counter10a[2].q & counter_cout[2..2])), (counter10a[2].q $ (counter10a[1].q & counter_cout[1..1])), (counter10a[1].q $ (counter10a[0].q & counter_cout[0..0])), ((cnt_en & (counter10a[0].q $ (! parity_cout))) # ((! cnt_en) & counter10a[0].q)));
	counter10a[].sclr = sclr;
	parity9.clk = clock;
	parity9.clrn = (! aclr);
	parity9.d = (parity9.q $ cnt_en);
	parity9.sclr = sclr;
	counter_cout[] = ( B"0", (counter_cout[6..6] & (! counter10a[6].q)), (counter_cout[5..5] & (! counter10a[5].q)), (counter_cout[4..4] & (! counter10a[4].q)), (counter_cout[3..3] & (! counter10a[3].q)), (counter_cout[2..2] & (! counter10a[2].q)), (counter_cout[1..1] & (! counter10a[1].q)), (counter_cout[0..0] & (! counter10a[0].q)), (cnt_en & parity_cout));
	parity_cout = ((parity9.q $ (! updown)) & cnt_en);
	q[] = counter10a[].q;
	sclr = GND;
	updown = VCC;
END;
--VALID FILE
